/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.incurrency.framework.display;

import com.incurrency.framework.Algorithm;
import com.incurrency.framework.EnumOrderReason;
import com.incurrency.framework.EnumOrderSide;
import com.incurrency.framework.EnumOrderStage;
import com.incurrency.framework.Order.EnumOrderType;
import com.incurrency.framework.ExecutionManager;
import com.incurrency.framework.MainAlgorithm;
import com.incurrency.framework.OrderBean;
import com.incurrency.framework.OrderQueueKey;
import com.incurrency.framework.Parameters;
import com.incurrency.framework.Strategy;
import com.incurrency.framework.Utilities;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

/**
 *
 * @author pankaj
 */
public class OrderForm extends javax.swing.JFrame {

    /**
     * Creates new form OrderForm
     */
    String strategy;
    int connection;
    String symbol;
    int quantity;
    int symbolid;
    EnumOrderSide side;
    int internalOrderId = 0;
    int internalOrderIdEntry = 0;
    EnumOrderReason notify;
    OrderBean ob;

    private static final Logger logger = Logger.getLogger(OrderForm.class.getName());

    public OrderForm(String symbol, int size, String strategy, int connection, EnumOrderSide side, int ibOrderID, EnumOrderReason notification) {
        initComponents();
        this.strategy = strategy;
        this.connection = connection;
        this.symbol = symbol;
        this.quantity = size;
        this.side = side;
        this.comboType.setSelectedIndex(2);
        this.notify = notification;
//        String[] symbolComponents;
//        symbolComponents=symbol.split("_");
        int id = Utilities.getIDFromDisplayName(Parameters.symbol, symbol);
        symbolid = id;
        this.lblSymbol.setText(symbol);
        this.lblSide.setText(side.toString());
        if (ibOrderID > 0) { //retrieve orders
            String key = "OQ:" + ibOrderID + ":" + Parameters.connection.get(connection).getAccountName() + ":" + strategy + ":" + symbol + ":" + symbol + ".*";
            Set<OrderQueueKey> oqks = Utilities.getAllOrderKeys(Algorithm.tradeDB, Parameters.connection.get(connection), key);
            if (oqks != null && oqks.size() == 1) {
                for (OrderQueueKey oqk : oqks) {
                    ob = Parameters.connection.get(connection).getOrderBeanCopy(oqk);
                }
            }else{
                logger.log(Level.SEVERE, "501,OrderForm: Duplicate OrderID for key,{0}", new Object[]{key});
           
            }
            if (ob != null) {
                internalOrderId = ob.getInternalOrderID();
               // internalOrderIdEntry = ob.getOrderKeyForSquareOff();
            }
        }
        if (id >= 0) {
            this.txtLimitPrice.setText(Double.toString(Parameters.symbol.get(id).getLastPrice()));
            if (Parameters.symbol.get(id).getType().equals("COMBO")) {
                this.txtTriggerPrice.setText("0");
                this.txtTriggerPrice.setEnabled(false);
            } else {
                this.txtTriggerPrice.setText(Double.toString(Parameters.symbol.get(id).getLastPrice()));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblSymbol = new javax.swing.JLabel();
        lblSide = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmdPlaceOrder = new javax.swing.JButton();
        cmdClose = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtLimitPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTriggerPrice = new javax.swing.JTextField();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Place /Cancel Order");
        setMinimumSize(new java.awt.Dimension(400, 131));
        setPreferredSize(null);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Symbol:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        lblSymbol.setText("symbol");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lblSymbol, gridBagConstraints);

        lblSide.setText("order side");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(lblSide, gridBagConstraints);

        jLabel4.setText("Side:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        cmdPlaceOrder.setText("Place Order");
        cmdPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPlaceOrderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 25);
        getContentPane().add(cmdPlaceOrder, gridBagConstraints);

        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 25);
        getContentPane().add(cmdClose, gridBagConstraints);

        cmdCancel.setText("Cancel Order");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 25);
        getContentPane().add(cmdCancel, gridBagConstraints);

        jLabel2.setText("Order Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        comboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LMT", "MKT", "STP" }));
        comboType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(comboType, gridBagConstraints);

        jLabel6.setText("Limit Price:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        txtLimitPrice.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(txtLimitPrice, gridBagConstraints);

        jLabel7.setText("Trigger Price:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(jLabel7, gridBagConstraints);

        txtTriggerPrice.setText("0");
        txtTriggerPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTriggerPriceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(txtTriggerPrice, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        dispose(); //Destroy the JFrame object
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPlaceOrderActionPerformed
        ExecutionManager oms;
        int expireTime;
        int maxOrderDuration;
        int dynamicOrderDuration;
        double maxSlippage;

        int strategyIndex = MainAlgorithm.getStrategies().indexOf(strategy);
        Strategy s = MainAlgorithm.strategyInstances.get(strategyIndex);
        oms = s.getOms();
        if (oms != null) {
//                internalOrderId=s.getInternalOrderID();
            HashMap<String, Object> order = new HashMap<>();
            if (ob == null) {
                ob = new OrderBean();
                int internalorderid = Utilities.getInternalOrderID();
                ob.setInternalOrderID(internalorderid);
                ob.setParentInternalOrderID(internalorderid);
                if (side.equals(EnumOrderSide.COVER) || side.equals(EnumOrderSide.SELL)) {
//                    ob.setOrderIDForSquareOff(oms.ParentInternalOrderIDForSquareOff(Parameters.connection.get(connection), ob));
                }
                ob.setChildDisplayName(Parameters.symbol.get(symbolid).getDisplayname());
                ob.setParentDisplayName(Parameters.symbol.get(symbolid).getDisplayname());
                ob.setOrderSide(side);
                ob.setLimitPrice(Double.valueOf(this.txtLimitPrice.getText()));
                ob.setTriggerPrice(Double.valueOf(this.txtTriggerPrice.getText()));
                ob.setOrderType(EnumOrderType.valueOf(comboType.getSelectedItem().toString()));
                ob.setOriginalOrderSize(Math.abs(quantity));
                ob.setOrderReference(s.getStrategy());
                ob.setOrderStage(EnumOrderStage.INIT);
                ob.setOrderReason(EnumOrderReason.UNDEFINED);
                //order attributes
                ob.setDisplaySize(Math.abs(quantity));
                ob.setValue(Utilities.getInt(s.getOrderAttributes().get("value"), 0));
                ob.setMaxPermissibleImpactCost(Utilities.getDouble(s.getOrderAttributes().get("thresholdimpactcost"), 0));
                ob.setSubOrderDelay(Utilities.getInt(s.getOrderAttributes().get("suborderdelay"), 1));
                ob.setImproveProbability(Utilities.getDouble(s.getOrderAttributes().get("improveprob"), 1));
                ob.setOrdersPerMinute(Utilities.getInt(s.getOrderAttributes().get("orderspermin"), 1));
                ob.setImproveAmount(Utilities.getInt(s.getOrderAttributes().get("improveamt"), 1));
                ob.setStickyPeriod(Utilities.getInt(s.getOrderAttributes().get("stickyperiod"), 0));
                ob.setFatFingerWindow(Utilities.getInt(s.getOrderAttributes().get("fatfingerwindow"), 120));
                ob.setScale(Boolean.FALSE);
                ob.setOrderLog(ob.getOrderLog()+";"+"MANUAL UI ENTRY");
                s.exit(ob);
            } else {
                ob.setOrderType(EnumOrderType.valueOf(comboType.getSelectedItem().toString()));
                ob.setTriggerPrice(Double.valueOf(this.txtTriggerPrice.getText()));
                ob.setLimitPrice(Double.valueOf(this.txtLimitPrice.getText()));
                ob.setOrderStage(EnumOrderStage.AMEND);
                ob.setOrderLog(ob.getOrderLog()+";"+"MANUAL UI ENTRY");
                s.getOms().tes.fireOrderEvent(ob);
            }
            dispose();
//                    } else {
//                        oms.cancelOpenOrders(Parameters.connection.get(connection), symbolid, s.getStrategy());
//                        s.exit(ob);
//                        dispose();
//                    }

        }
    }//GEN-LAST:event_cmdPlaceOrderActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        ExecutionManager oms;
        int strategyIndex = MainAlgorithm.getStrategies().indexOf(strategy);
        Strategy s = MainAlgorithm.strategyInstances.get(strategyIndex);
        oms = s.getOms();
        if (oms != null) {
            oms.cancelOpenOrders(Parameters.connection.get(connection), symbolid, strategy);
            dispose();
        }
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void txtTriggerPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTriggerPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTriggerPriceActionPerformed

    private void comboTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTypeActionPerformed
        JComboBox comboBox = (JComboBox) evt.getSource();
        String type = comboBox.getSelectedItem().toString();
        switch (type) {
            case "MKT":
                this.txtLimitPrice.setText("0");
                this.txtTriggerPrice.setText("0");
                this.txtLimitPrice.setEditable(false);
                this.txtTriggerPrice.setEditable(false);
                break;
            case "LMT":
                this.txtTriggerPrice.setText("0");
                this.txtTriggerPrice.setEditable(false);
                break;
            case "STP":
                this.txtTriggerPrice.setEditable(true);
                this.txtLimitPrice.setEditable(true);
                break;
            default:
                break;

        }
    }//GEN-LAST:event_comboTypeActionPerformed

    public void setVisiblePlaceOrder(boolean state) {
        cmdPlaceOrder.setVisible(state);
    }

    public void setVisibleCancelOrder(boolean state) {
        cmdCancel.setVisible(state);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new OrderForm(0,0).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClose;
    private static javax.swing.JButton cmdPlaceOrder;
    private javax.swing.JComboBox comboType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblSide;
    private javax.swing.JLabel lblSymbol;
    private javax.swing.JTextField txtLimitPrice;
    private javax.swing.JTextField txtTriggerPrice;
    // End of variables declaration//GEN-END:variables
}
